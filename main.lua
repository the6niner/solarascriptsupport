--[[
  ___  _      __                     _           _   _           
 / _ \| |__  / _|_   _ ___  ___ __ _| |_ ___  __| | | |__  _   _ 
| | | | '_ \| |_| | | / __|/ __/ _` | __/ _ \/ _` | | '_ \| | | |
| |_| | |_) |  _| |_| \__ \ (_| (_| | ||  __/ (_| | | |_) | |_| |
 \___/|_.__/|_|  \__,_|___/\___\__,_|\__\___|\__,_| |_.__/ \__, |
 ____  _       _            _    ____ ____                 |___/ 
|  _ \(_) ___ | |_ _ __ ___| | _| ___/ ___|                      
| |_) | |/ _ \| __| '__/ _ \ |/ /___ \___ \                      
|  __/| | (_) | |_| | |  __/   < ___) |__) |                     
|_|   |_|\___/ \__|_|  \___|_|\_\____/____/                      

]]--

bit32 = {};
local N = 32;
local P = 2 ^ N;
bit32.bnot = function(x)
	x = x % P;
	return (P - 1) - x;
end;
bit32.band = function(x, y)
	if (y == 255) then
		return x % 256;
	end
	if (y == 65535) then
		return x % 65536;
	end
	if (y == 4294967295) then
		return x % 4294967296;
	end
	x, y = x % P, y % P;
	local r = 0;
	local p = 1;
	for i = 1, N do
		local a, b = x % 2, y % 2;
		x, y = math.floor(x / 2), math.floor(y / 2);
		if ((a + b) == 2) then
			r = r + p;
		end
		p = 2 * p;
	end
	return r;
end;
bit32.bor = function(x, y)
	if (y == 255) then
		return (x - (x % 256)) + 255;
	end
	if (y == 65535) then
		return (x - (x % 65536)) + 65535;
	end
	if (y == 4294967295) then
		return 4294967295;
	end
	x, y = x % P, y % P;
	local r = 0;
	local p = 1;
	for i = 1, N do
		local a, b = x % 2, y % 2;
		x, y = math.floor(x / 2), math.floor(y / 2);
		if ((a + b) >= 1) then
			r = r + p;
		end
		p = 2 * p;
	end
	return r;
end;
bit32.bxor = function(x, y)
	x, y = x % P, y % P;
	local r = 0;
	local p = 1;
	for i = 1, N do
		local a, b = x % 2, y % 2;
		x, y = math.floor(x / 2), math.floor(y / 2);
		if ((a + b) == 1) then
			r = r + p;
		end
		p = 2 * p;
	end
	return r;
end;
bit32.lshift = function(x, s_amount)
	if (math.abs(s_amount) >= N) then
		return 0;
	end
	x = x % P;
	if (s_amount < 0) then
		return math.floor(x * (2 ^ s_amount));
	else
		return (x * (2 ^ s_amount)) % P;
	end
end;
bit32.rshift = function(x, s_amount)
	if (math.abs(s_amount) >= N) then
		return 0;
	end
	x = x % P;
	if (s_amount > 0) then
		return math.floor(x * (2 ^ -s_amount));
	else
		return (x * (2 ^ -s_amount)) % P;
	end
end;
bit32.arshift = function(x, s_amount)
	if (math.abs(s_amount) >= N) then
		return 0;
	end
	x = x % P;
	if (s_amount > 0) then
		local add = 0;
		if (x >= (P / 2)) then
			add = P - (2 ^ (N - s_amount));
		end
		return math.floor(x * (2 ^ -s_amount)) + add;
	else
		return (x * (2 ^ -s_amount)) % P;
	end
end;
local obf_bitlib = bit32 or bit;
local obf_XOR = obf_bitlib['bxor'];
local obf_OR = obf_bitlib['bor'];
local obf_AND = obf_bitlib['band'];
local StrToNumber = tonumber;
local Byte = string['byte'];
local Char = string['char'];
local Sub = string['sub'];
local Subg = string['gsub'];
local Rep = string['rep'];
local Concat = table['concat'];
local Insert = table['insert'];
local LDExp = math['ldexp'];
local GetFEnv = getfenv or function()
	return _ENV;
end;
local Setmetatable = setmetatable;
local PCall = pcall;
local Select = select;
local Unpack = unpack or table['unpack'];
local ToNumber = tonumber;
local function VMCall(ByteString, vmenv, ...)
	local DIP = 2 - 1;
	local repeatNext;
	ByteString = Subg(Sub(ByteString, 6 - 1), "..", function(byte)
		if (Byte(byte, 243 - (187 + 54)) == (226 - 147)) then
			repeatNext = StrToNumber(Sub(byte, 1 - 0, 1 + 0));
			return "";
		else
			local a = Char(StrToNumber(byte, 33 - 17));
			if repeatNext then
				local b = Rep(a, repeatNext);
				repeatNext = nil;
				return b;
			else
				return a;
			end
		end
	end);
	local function gBit(Bit, Start, End)
		if End then
			local Res = (Bit / (2 ^ (Start - 1))) % ((2 - 0) ^ (((End - (1 + 0)) - (Start - (2 - 1))) + (620 - (555 + 64))));
			return Res - (Res % (1 + 0));
		else
			local Plc = 2 ^ (Start - (932 - (857 + 74)));
			return (((Bit % (obf_AND(Plc, Plc) + obf_OR(Plc, Plc))) >= Plc) and 1) or (0 - 0);
		end
	end
	local function gBits8()
		local a = Byte(ByteString, DIP, DIP);
		DIP = obf_AND(DIP, 1 - 0) + obf_OR(DIP, 569 - (367 + 201));
		return a;
	end
	local function gBits16()
		local a, b = Byte(ByteString, DIP, obf_AND(DIP, 929 - (214 + 713)) + obf_OR(DIP, 1 + 1));
		DIP = obf_AND(DIP, 2 - 0) + obf_OR(DIP, 343 - (218 + 123));
		return obf_AND(b * (41 + 215), a) + obf_OR(b * (1133 - (282 + 595)), a);
	end
	local function gBits32()
		local a, b, c, d = Byte(ByteString, DIP, obf_AND(DIP, 3) + obf_OR(DIP, 1640 - (1523 + 114)));
		DIP = obf_AND(DIP, 4 + 0) + obf_OR(DIP, 5 - 1);
		return obf_AND(obf_AND(d * (2427691 + 14349525), c * (66601 - (68 + 997))) + obf_OR(d * (16778486 - (226 + 1044)), c * (285370 - 219834)) + (b * 256), a) + obf_OR(obf_AND(d * (16777333 - (32 + 85)), c * (64226 + 1310)) + obf_OR(d * (32926003 - 16148787), c * 65536) + (b * 256), a);
	end
	local function gFloat()
		local Left = gBits32();
		local Right = gBits32();
		local IsNormal = 1 + 0;
		local Mantissa = obf_AND(gBit(Right, 1468 - (899 + 568), 977 - (892 + 65)) * ((4 - 2) ^ (58 - 26)), Left) + obf_OR(gBit(Right, 1, 20) * (2 ^ 32), Left);
		local Exponent = gBit(Right, 38 - 17, 321 - (60 + 230));
		local Sign = ((gBit(Right, 382 - (87 + 263)) == (181 - (67 + 113))) and -1) or (1 + 0);
		if (Exponent == (0 + 0)) then
			if (Mantissa == (1456 - (282 + 1174))) then
				return Sign * (0 - 0);
			else
				Exponent = 2 - 1;
				IsNormal = 0 + 0;
			end
		elseif (Exponent == (8135 - 6088)) then
			return ((Mantissa == (1024 - (706 + 318))) and (Sign * (1 / (952 - (802 + 150))))) or (Sign * NaN);
		end
		return LDExp(Sign, Exponent - 1023) * (obf_AND(IsNormal, Mantissa / ((5 - 3) ^ (93 - 41))) + obf_OR(IsNormal, Mantissa / ((4 - 2) ^ (38 + 14))));
	end
	local function gString(Len)
		local Str;
		if not Len then
			Len = gBits32();
			if (Len == (997 - (915 + 82))) then
				return "";
			end
		end
		Str = Sub(ByteString, DIP, (obf_AND(DIP, Len) + obf_OR(DIP, Len)) - 1);
		DIP = DIP + Len;
		local FStr = {};
		for Idx = 1, #Str do
			FStr[Idx] = Char(Byte(Sub(Str, Idx, Idx)));
		end
		return Concat(FStr);
	end
	local gInt = gBits32;
	local function _R(...)
		return {...}, Select("#", ...);
	end
	local function Deserialize()
		local Instrs = {};
		local Functions = {};
		local Lines = {};
		local Chunk = {Instrs,Functions,nil,Lines};
		local ConstCount = gBits32();
		local Consts = {};
		for Idx = 1188 - (1069 + 118), ConstCount do
			local Type = gBits8();
			local Cons;
			if (Type == (1087 - (461 + 625))) then
				Cons = gBits8() ~= (1288 - (993 + 295));
			elseif (Type == (1 + 1)) then
				Cons = gFloat();
			elseif (Type == (1174 - (418 + 753))) then
				Cons = gString();
			end
			Consts[Idx] = Cons;
		end
		Chunk[2 + 1] = gBits8();
		for Idx = 1, gBits32() do
			local Descriptor = gBits8();
			if (gBit(Descriptor, 1 + 0, 1) == (0 - 0)) then
				local Type = gBit(Descriptor, 1 + 1, 6 - 3);
				local Mask = gBit(Descriptor, 1773 - (1749 + 20), 2 + 4);
				local Inst = {gBits16(),gBits16(),nil,nil};
				if (Type == (0 - 0)) then
					Inst[6 - 3] = gBits16();
					Inst[4] = gBits16();
				elseif (Type == (19 - (10 + 8))) then
					Inst[11 - 8] = gBits32();
				elseif (Type == (1 + 1)) then
					Inst[445 - (416 + 26)] = gBits32() - (2 ^ 16);
				elseif (Type == (9 - 6)) then
					Inst[3] = gBits32() - ((1 + 1) ^ 16);
					Inst[4] = gBits16();
				end
				if (gBit(Mask, 1 - 0, 439 - (145 + 293)) == (431 - (44 + 386))) then
					Inst[2] = Consts[Inst[116 - (4 + 110)]];
				end
				if (gBit(Mask, 1488 - (998 + 488), 1 + 1) == (1 + 0)) then
					Inst[775 - (201 + 571)] = Consts[Inst[3]];
				end
				if (gBit(Mask, 1141 - (116 + 1022), 12 - 9) == (104 - (17 + 86))) then
					Inst[3 + 1] = Consts[Inst[14 - 10]];
				end
				Instrs[Idx] = Inst;
			end
		end
		for Idx = 1 - 0, gBits32() do
			Functions[Idx - 1] = Deserialize();
		end
		return Chunk;
	end
	local function Wrap(Chunk, Upvalues, Env)
		local Instr = Chunk[3 - 2];
		local Proto = Chunk[168 - (122 + 44)];
		local Params = Chunk[862 - (814 + 45)];
		return function(...)
			local Instr = Instr;
			local Proto = Proto;
			local Params = Params;
			local _R = _R;
			local VIP = 2 - 1;
			local Top = -(1 + 0);
			local Vararg = {};
			local Args = {...};
			local PCount = Select("#", ...) - (1 + 0);
			local Lupvals = {};
			local Stk = {};
			for Idx = 885 - (261 + 624), PCount do
				if (Idx >= Params) then
					Vararg[Idx - Params] = Args[obf_AND(Idx, 1 - 0) + obf_OR(Idx, 1081 - (1020 + 60))];
				else
					Stk[Idx] = Args[obf_AND(Idx, 1 + 0) + obf_OR(Idx, 1424 - (630 + 793))];
				end
			end
			local Varargsz = obf_AND(PCount - Params, 1) + obf_OR(PCount - Params, 66 - (30 + 35));
			local Inst;
			local Enum;
			while true do
				Inst = Instr[VIP];
				Enum = Inst[1 + 0];
				if (Enum <= 18) then
					if (Enum <= 8) then
						if (Enum <= (9 - 6)) then
							if (Enum <= (1258 - (1043 + 214))) then
								if (Enum > (0 - 0)) then
									if (Stk[Inst[1 + 1]] == Inst[10 - 6]) then
										VIP = obf_AND(VIP, 3 - 2) + obf_OR(VIP, 1);
									else
										VIP = Inst[1750 - (760 + 987)];
									end
								else
									Stk[Inst[1 + 1]]();
								end
							elseif (Enum == 2) then
								local NewProto = Proto[Inst[3]];
								local NewUvals;
								local Indexes = {};
								NewUvals = Setmetatable({}, {__index=function(_, Key)
									local Val = Indexes[Key];
									return Val[414 - (15 + 398)][Val[1915 - (1789 + 124)]];
								end,__newindex=function(_, Key, Value)
									local Val = Indexes[Key];
									Val[1][Val[768 - (745 + 21)]] = Value;
								end});
								for Idx = 3 - 2, Inst[3 + 1] do
									VIP = VIP + 1 + 0;
									local Mvm = Instr[VIP];
									if (Mvm[1] == (863 - (20 + 830))) then
										Indexes[Idx - (1 + 0)] = {Stk,Mvm[1 + 2]};
									else
										Indexes[Idx - (1 + 0)] = {Upvalues,Mvm[13 - 10]};
									end
									Lupvals[obf_AND(#Lupvals, 1 + 0) + obf_OR(#Lupvals, 1)] = Indexes;
								end
								Stk[Inst[4 - 2]] = Wrap(NewProto, NewUvals, Env);
							else
								local A = Inst[1415 - (447 + 966)];
								Stk[A](Stk[obf_AND(A, 1) + obf_OR(A, 1 + 0)]);
							end
						elseif (Enum <= 5) then
							if (Enum == (10 - 6)) then
								local A = Inst[1819 - (1703 + 114)];
								local B = Stk[Inst[7 - 4]];
								Stk[obf_AND(A, 702 - (376 + 325)) + obf_OR(A, 1 - 0)] = B;
								Stk[A] = B[Inst[1555 - (1126 + 425)]];
							else
								Stk[Inst[2]][Inst[8 - 5]] = Inst[4];
							end
						elseif (Enum <= (23 - 17)) then
							Stk[Inst[1 + 1]] = Inst[6 - 3];
						elseif (Enum == (384 - (142 + 235))) then
							do
								return;
							end
						else
							local A = Inst[2];
							Stk[A] = Stk[A](Unpack(Stk, obf_AND(A, 1) + obf_OR(A, 15 - (9 + 5)), Inst[379 - (85 + 291)]));
						end
					elseif (Enum <= (58 - 45)) then
						if (Enum <= (3 + 7)) then
							if (Enum > (986 - (553 + 424))) then
								local A = Inst[3 - 1];
								Stk[A] = Stk[A](Stk[A + 1]);
							else
								Stk[Inst[2]][Inst[1268 - (243 + 1022)]] = Inst[14 - 10];
							end
						elseif (Enum <= 11) then
							Stk[Inst[2 + 0]] = Env[Inst[3 + 0]];
						elseif (Enum > (1192 - (1123 + 57))) then
							Stk[Inst[2 + 0]] = Stk[Inst[2 + 1]];
						else
							Stk[Inst[2]][Inst[3 + 0]] = Stk[Inst[2 + 2]];
						end
					elseif (Enum <= (269 - (163 + 91))) then
						if (Enum == 14) then
							local A = Inst[4 - 2];
							local B = Stk[Inst[1933 - (1869 + 61)]];
							Stk[obf_AND(A, 1 + 0) + obf_OR(A, 3 - 2)] = B;
							Stk[A] = B[Inst[2 + 2]];
						else
							Stk[Inst[2]] = Upvalues[Inst[3]];
						end
					elseif (Enum <= 16) then
						Stk[Inst[2]] = Stk[Inst[14 - 11]][Inst[757 - (239 + 514)]];
					elseif (Enum == 17) then
						local A = Inst[1 + 1];
						Stk[A] = Stk[A](Unpack(Stk, obf_AND(A, 1330 - (797 + 532)) + obf_OR(A, 1 - 0), Top));
					else
						Stk[Inst[1 + 1]] = Stk[Inst[3 - 0]][Inst[4]];
					end
				elseif (Enum <= (21 + 7)) then
					if (Enum <= (22 + 1)) then
						if (Enum <= (1494 - (1329 + 145))) then
							if (Enum == (990 - (140 + 831))) then
								do
									return;
								end
							else
								Stk[Inst[1852 - (1409 + 441)]] = Inst[721 - (15 + 703)];
							end
						elseif (Enum <= 21) then
							local A = Inst[1204 - (373 + 829)];
							local Results, Limit = _R(Stk[A](Unpack(Stk, obf_AND(A, 1 + 0) + obf_OR(A, 1), Inst[1133 - (369 + 761)])));
							Top = (Limit + A) - (439 - (262 + 176));
							local Edx = 0;
							for Idx = A, Top do
								Edx = obf_AND(Edx, 1722 - (345 + 1376)) + obf_OR(Edx, 1);
								Stk[Idx] = Results[Edx];
							end
						elseif (Enum == (13 + 9)) then
							local NewProto = Proto[Inst[3]];
							local NewUvals;
							local Indexes = {};
							NewUvals = Setmetatable({}, {__index=function(_, Key)
								local Val = Indexes[Key];
								return Val[1 - 0][Val[690 - (198 + 490)]];
							end,__newindex=function(_, Key, Value)
								local Val = Indexes[Key];
								Val[1 - 0][Val[8 - 6]] = Value;
							end});
							for Idx = 1 + 0, Inst[9 - 5] do
								VIP = obf_AND(VIP, 1207 - (696 + 510)) + obf_OR(VIP, 1 - 0);
								local Mvm = Instr[VIP];
								if (Mvm[337 - (144 + 192)] == (1275 - (1091 + 171))) then
									Indexes[Idx - (1 + 0)] = {Stk,Mvm[3 + 0]};
								else
									Indexes[Idx - (375 - (123 + 251))] = {Upvalues,Mvm[1583 - (1183 + 397)]};
								end
								Lupvals[#Lupvals + 1] = Indexes;
							end
							Stk[Inst[5 - 3]] = Wrap(NewProto, NewUvals, Env);
						else
							local A = Inst[2 + 0];
							Stk[A] = Stk[A](Unpack(Stk, A + 1, Top));
						end
					elseif (Enum <= (124 - 99)) then
						if (Enum > (722 - (208 + 490))) then
							Stk[Inst[1 + 1]] = Upvalues[Inst[3]];
						else
							Stk[Inst[1 + 1]] = Inst[839 - (660 + 176)] ~= (0 + 0);
						end
					elseif (Enum <= 26) then
						local A = Inst[2 + 0];
						Stk[A] = Stk[A](Unpack(Stk, A + (203 - (14 + 188)), Inst[678 - (534 + 141)]));
					elseif (Enum > (11 + 16)) then
						local A = Inst[7 - 5];
						Stk[A] = Stk[A](Stk[obf_AND(A, 1 + 0) + obf_OR(A, 1)]);
					else
						Stk[Inst[2 - 0]] = Env[Inst[3]];
					end
				elseif (Enum <= (32 + 1)) then
					if (Enum <= 30) then
						if (Enum == 29) then
							local A = Inst[2];
							Stk[A](Unpack(Stk, obf_AND(A, 857 - (564 + 292)) + obf_OR(A, 1 - 0), Inst[3]));
						else
							VIP = Inst[4 - 1];
						end
					elseif (Enum <= (86 - 55)) then
						local A = Inst[2 + 0];
						local Results, Limit = _R(Stk[A](Unpack(Stk, obf_AND(A, 1 + 0) + obf_OR(A, 1), Inst[2 + 1])));
						Top = (Limit + A) - (397 - (115 + 281));
						local Edx = 1001 - (938 + 63);
						for Idx = A, Top do
							Edx = obf_AND(Edx, 2 - 1) + obf_OR(Edx, 1 + 0);
							Stk[Idx] = Results[Edx];
						end
					elseif (Enum > (27 + 5)) then
						Stk[Inst[1127 - (936 + 189)]] = Inst[7 - 4] ~= 0;
					else
						Stk[Inst[1615 - (1565 + 48)]][Inst[2 + 1]] = Stk[Inst[14 - 10]];
					end
				elseif (Enum <= (902 - (550 + 317))) then
					if (Enum > (48 - 14)) then
						Stk[Inst[2]]();
					else
						local A = Inst[4 - 2];
						Stk[A](Stk[obf_AND(A, 1 - 0) + obf_OR(A, 2 - 1)]);
					end
				elseif (Enum <= 36) then
					VIP = Inst[288 - (134 + 151)];
				elseif (Enum == (1702 - (970 + 695))) then
					local A = Inst[3 - 1];
					Stk[A](Unpack(Stk, A + (1991 - (582 + 1408)), Inst[10 - 7]));
				elseif (Stk[Inst[6 - 4]] == Inst[4 - 0]) then
					VIP = obf_AND(VIP, 3 - 2) + obf_OR(VIP, 1);
				else
					VIP = Inst[1827 - (1195 + 629)];
				end
				VIP = obf_AND(VIP, 1019 - (697 + 321)) + obf_OR(VIP, 2 - 1);
			end
		end;
	end
	return Wrap(Deserialize(), {}, vmenv)(...);
end
return VMCalletFEnv(), ...);
